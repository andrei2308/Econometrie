#H1: Exista multicoliniaritate
#Testul VIF
cat("\nTestul de multicoliniaritate (VIF):\n")
vif_test <- vif(model)
print(vif_test)
if (max(vif_test) > 10) {
cat("Ipoteza nulă a fost respinsă: Exista multicoliniaritate.\n")
#Eliminam variabilele cu VIF mare
cat("\nEliminam variabilele cu VIF mare:\n")
selected_vars <- c("Quantity.Sold..liters.kg.","Price.per.Unit..sold.","Minimum.Stock.Threshold..liters.kg.","Reorder.Quantity..liters.kg.")
data_refined <- data[, selected_vars]
# Model de regresie multipla cu variabile semnificative
final_data <- data.frame(data_refined, Revenue = y)
model <- lm(Revenue ~ ., data = final_data)
summary_model <- summary(model)
cat("\nRezumatul modelului de regresie multipla cu variabile semnificative:\n")
print(summary_model)
} else {
cat("Ipoteza nulă nu a fost respinsă: Nu exista multicoliniaritate.\n")
}
return(list(
model = model,
data = final_data,
residuals = residuals_model
))
cat("----------------------------------END----------------------------------\n")
}
result_small <- process_farm_data(small_farms, "Small")
result_medium <- process_farm_data(medium_farms, "Medium")
result_large <- process_farm_data(large_farms, "Large")
model_small <- result_small$model
data_small <- result_small$data
residuals_small <- result_small$residuals
model_medium <- result_medium$model
data_medium <- result_medium$data
residuals_medium <- result_medium$residuals
model_large <- result_large$model
data_large <- result_large$data
residuals_large <- result_large$residuals
enchance_multiple_linear_model <- function(model)
{
summary_model <- summary(model)
cat("\nRezumatul modelului de regresie multipla:\n")
print(summary_model)
}
enchance_multiple_linear_model(model_small)
enchance_multiple_linear_model(model_medium)
enchance_multiple_linear_model(model_large)
compare_farms_models <- function(model_small, model_medium, model_large, data_small, data_medium, data_large) {
cat("================================= ANALIZA COMPARATIVĂ =================================\n")
# 1. Performanța modelelor
cat("\n1. Compararea performanței modelelor (RMSE):\n")
# Calcularea RMSE pentru fiecare model
calc_rmse <- function(model, data) {
pred <- predict(model, data)
actual <- data$Revenue
sqrt(mean((pred - actual)^2))
}
rmse_small <- calc_rmse(model_small, data_small)
rmse_medium <- calc_rmse(model_medium, data_medium)
rmse_large <- calc_rmse(model_large, data_large)
cat("RMSE pentru ferme mici:", rmse_small, "\n")
cat("RMSE pentru ferme medii:", rmse_medium, "\n")
cat("RMSE pentru ferme mari:", rmse_large, "\n")
# 2. Compararea coeficienților semnificativi
cat("\n2. Compararea coeficienților semnificativi din modele:\n")
print("Ferme mici:")
print(summary(model_small)$coefficients)
print("Ferme medii:")
print(summary(model_medium)$coefficients)
print("Ferme mari:")
print(summary(model_large)$coefficients)
# 3. Testarea diferențelor între modelele reziduurilor folosind ANOVA
cat("\n3. Testarea diferențelor între modele folosind ANOVA:\n")
# Combinația datelor și reziduurilor pentru ANOVA
data_small$residuals <- residuals(model_small)
data_medium$residuals <- residuals(model_medium)
data_large$residuals <- residuals(model_large)
combined_data <- data.frame(
Residuals = c(data_small$residuals, data_medium$residuals, data_large$residuals),
Farm_Type = rep(c("Small", "Medium", "Large"),
times = c(nrow(data_small), nrow(data_medium), nrow(data_large)))
)
anova_test <- aov(Residuals ~ Farm_Type, data = combined_data)
print(summary(anova_test))
# 4. Testarea diferențelor dintre medii folosind t-test pentru perechi
cat("\n4. Testarea diferențelor dintre medii (t-test perechi):\n")
t_test_small_medium <- t.test(data_small$residuals, data_medium$residuals)
t_test_medium_large <- t.test(data_medium$residuals, data_large$residuals)
t_test_small_large <- t.test(data_small$residuals, data_large$residuals)
cat("T-test între ferme mici și medii:\n")
print(t_test_small_medium)
cat("T-test între ferme medii și mari:\n")
print(t_test_medium_large)
cat("T-test între ferme mici și mari:\n")
print(t_test_small_large)
# 5. Vizualizări grafice
cat("\n5. Vizualizări grafice pentru reziduuri:\n")
par(mfrow = c(1, 3)) # Setăm layout pentru 3 grafice
hist(data_small$residuals, main = "Ferme Mici", xlab = "Reziduuri", col = "lightblue", border = "black")
hist(data_medium$residuals, main = "Ferme Medii", xlab = "Reziduuri", col = "lightgreen", border = "black")
hist(data_large$residuals, main = "Ferme Mari", xlab = "Reziduuri", col = "lightcoral", border = "black")
par(mfrow = c(1, 1)) # Resetăm layout
cat("\n================================= SFÂRȘIT ANALIZĂ =================================\n")
}
compare_farms_models(model_small, model_medium, model_large, data_small, data_medium, data_large)
#Functie pentru a alege modelul optim in functie de R patrat si R patrat ajustat si criteriile informationale Akaike, Schwarz si Hannan-Quinn
choose_best_model <- function(model_small, model_medium, model_large) {
cat("================================= ALEGEM CEL MAI BUN MODEL =================================\n")
# Calcularea R^2 și R^2 ajustat pentru fiecare model
calc_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$r.squared
}
r_squared_small <- calc_r_squared(model_small)
r_squared_medium <- calc_r_squared(model_medium)
r_squared_large <- calc_r_squared(model_large)
cat("\nR^2 pentru ferme mici:", r_squared_small, "\n")
cat("R^2 pentru ferme medii:", r_squared_medium, "\n")
cat("R^2 pentru ferme mari:", r_squared_large, "\n")
# Calcularea R^2 ajustat pentru fiecare model
calc_adjusted_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$adj.r.squared
}
adjusted_r_squared_small <- calc_adjusted_r_squared(model_small)
adjusted_r_squared_medium <- calc_adjusted_r_squared(model_medium)
adjusted_r_squared_large <- calc_adjusted_r_squared(model_large)
cat("\nR^2 ajustat pentru ferme mici:", adjusted_r_squared_small, "\n")
cat("R^2 ajustat pentru ferme medii:", adjusted_r_squared_medium, "\n")
cat("R^2 ajustat pentru ferme mari:", adjusted_r_squared_large, "\n")
# Calcularea criteriilor informationale Akaike, Schwarz și Hannan-Quinn
calc_aic <- function(model) {
AIC(model)
}
aic_small <- calc_aic(model_small)
aic_medium <- calc_aic(model_medium)
aic_large <- calc_aic(model_large)
cat("\nCriteriul Akaike pentru ferme mici:", aic_small, "\n")
cat("Criteriul Akaike pentru ferme medii:", aic_medium, "\n")
cat("Criteriul Akaike pentru ferme mari:", aic_large, "\n")
calc_bic <- function(model) {
BIC(model)
}
bic_small <- calc_bic(model_small)
bic_medium <- calc_b
ic(model_medium)
bic_large <- calc_bic(model_large)
cat("\nCriteriul Schwarz pentru ferme mici:", bic_small, "\n")
cat("Criteriul Schwarz pentru ferme medii:", bic_medium, "\n")
cat("Criteriul Schwarz pentru ferme mari:", bic_large, "\n")
calc_hq <- function(model) {
HQIC(model)
}
hq_small <- calc_hq(model_small)
hq_medium <- calc_hq(model_medium)
hq_large <- calc_hq(model_large)
cat("\nCriteriul Hannan-Quinn pentru ferme mici:", hq_small, "\n")
cat("Criteriul Hannan-Quinn pentru ferme medii:", hq_medium, "\n")
cat("Criteriul Hannan-Quinn pentru ferme mari:", hq_large, "\n")
# Alegerea modelului cu cel mai mare R^2 ajustat
best_model <- model_small
if (adjusted_r_squared_medium > adjusted_r_squared_small) {
best_model <- model_medium
}
if (adjusted_r_squared_large > adjusted_r_squared_medium) {
best_model <- model_large
}
cat("\nModelul optim este pentru fermele mari cu R^2 ajustat:", adjusted_r_squared_large, "\n")
return(best_model)
}
best_model <- choose_best_model(model_small, model_medium, model_large)
choose_best_model <- function(model_small, model_medium, model_large) {
cat("================================= ALEGEM CEL MAI BUN MODEL =================================\n")
# Calcularea R^2 și R^2 ajustat pentru fiecare model
calc_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$r.squared
}
r_squared_small <- calc_r_squared(model_small)
r_squared_medium <- calc_r_squared(model_medium)
r_squared_large <- calc_r_squared(model_large)
cat("\nR^2 pentru ferme mici:", r_squared_small, "\n")
cat("R^2 pentru ferme medii:", r_squared_medium, "\n")
cat("R^2 pentru ferme mari:", r_squared_large, "\n")
# Calcularea R^2 ajustat pentru fiecare model
calc_adjusted_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$adj.r.squared
}
adjusted_r_squared_small <- calc_adjusted_r_squared(model_small)
adjusted_r_squared_medium <- calc_adjusted_r_squared(model_medium)
adjusted_r_squared_large <- calc_adjusted_r_squared(model_large)
cat("\nR^2 ajustat pentru ferme mici:", adjusted_r_squared_small, "\n")
cat("R^2 ajustat pentru ferme medii:", adjusted_r_squared_medium, "\n")
cat("R^2 ajustat pentru ferme mari:", adjusted_r_squared_large, "\n")
# Calcularea criteriilor informationale Akaike, Schwarz și Hannan-Quinn
calc_aic <- function(model) {
AIC(model)
}
aic_small <- calc_aic(model_small)
aic_medium <- calc_aic(model_medium)
aic_large <- calc_aic(model_large)
cat("\nCriteriul Akaike pentru ferme mici:", aic_small, "\n")
cat("Criteriul Akaike pentru ferme medii:", aic_medium, "\n")
cat("Criteriul Akaike pentru ferme mari:", aic_large, "\n")
calc_bic <- function(model) {
BIC(model)
}
bic_small <- calc_bic(model_small)
bic_medium <- calc_bic(model_medium)
bic_large <- calc_bic(model_large)
cat("\nCriteriul Schwarz pentru ferme mici:", bic_small, "\n")
cat("Criteriul Schwarz pentru ferme medii:", bic_medium, "\n")
cat("Criteriul Schwarz pentru ferme mari:", bic_large, "\n")
# Notă: HQIC nu este o funcție standard în R, așa că este necesar să o implementezi sau să verifici dacă pachetul folosit suportă HQIC.
calc_hq <- function(model) {
# Înlocuiește cu funcția corectă sau folosește o aproximare
AIC(model, k = log(length(model$residuals)))
}
hq_small <- calc_hq(model_small)
hq_medium <- calc_hq(model_medium)
hq_large <- calc_hq(model_large)
cat("\nCriteriul Hannan-Quinn pentru ferme mici:", hq_small, "\n")
cat("Criteriul Hannan-Quinn pentru ferme medii:", hq_medium, "\n")
cat("Criteriul Hannan-Quinn pentru ferme mari:", hq_large, "\n")
# Alegerea modelului cu cel mai mare R^2 ajustat
best_model <- model_small
best_model_label <- "fermele mici"
best_r_squared <- adjusted_r_squared_small
if (adjusted_r_squared_medium > best_r_squared) {
best_model <- model_medium
best_model_label <- "fermele medii"
best_r_squared <- adjusted_r_squared_medium
}
if (adjusted_r_squared_large > best_r_squared) {
best_model <- model_large
best_model_label <- "fermele mari"
best_r_squared <- adjusted_r_squared_large
}
cat("\nModelul optim este pentru", best_model_label, "cu R^2 ajustat:", best_r_squared, "\n")
return(best_model)
}
best_model <- choose_best_model(model_small, model_medium, model_large)
install.packages("ICcTools")
library(ICcTools)
library(ICcTools)
install.packages("ICcTools")
install.packages("AICcmodavg")
library(AICcmodavg)
choose_best_model <- function(model_small, model_medium, model_large) {
cat("================================= ALEGEM CEL MAI BUN MODEL =================================\n")
# Calcularea R^2 și R^2 ajustat pentru fiecare model
calc_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$r.squared
}
r_squared_small <- calc_r_squared(model_small)
r_squared_medium <- calc_r_squared(model_medium)
r_squared_large <- calc_r_squared(model_large)
cat("\nR^2 pentru ferme mici:", r_squared_small, "\n")
cat("R^2 pentru ferme medii:", r_squared_medium, "\n")
cat("R^2 pentru ferme mari:", r_squared_large, "\n")
# Calcularea R^2 ajustat pentru fiecare model
calc_adjusted_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$adj.r.squared
}
adjusted_r_squared_small <- calc_adjusted_r_squared(model_small)
adjusted_r_squared_medium <- calc_adjusted_r_squared(model_medium)
adjusted_r_squared_large <- calc_adjusted_r_squared(model_large)
cat("\nR^2 ajustat pentru ferme mici:", adjusted_r_squared_small, "\n")
cat("R^2 ajustat pentru ferme medii:", adjusted_r_squared_medium, "\n")
cat("R^2 ajustat pentru ferme mari:", adjusted_r_squared_large, "\n")
# Calcularea criteriilor informationale Akaike, Schwarz și Hannan-Quinn
calc_aic <- function(model) {
AIC(model)
}
aic_small <- calc_aic(model_small)
aic_medium <- calc_aic(model_medium)
aic_large <- calc_aic(model_large)
cat("\nCriteriul Akaike pentru ferme mici:", aic_small, "\n")
cat("Criteriul Akaike pentru ferme medii:", aic_medium, "\n")
cat("Criteriul Akaike pentru ferme mari:", aic_large, "\n")
calc_bic <- function(model) {
BIC(model)
}
bic_small <- calc_bic(model_small)
bic_medium <- calc_bic(model_medium)
bic_large <- calc_bic(model_large)
cat("\nCriteriul Schwarz pentru ferme mici:", bic_small, "\n")
cat("Criteriul Schwarz pentru ferme medii:", bic_medium, "\n")
cat("Criteriul Schwarz pentru ferme mari:", bic_large, "\n")
# Notă: HQIC nu este o funcție standard în R, așa că este necesar să o implementezi sau să verifici dacă pachetul folosit suportă HQIC.
calc_hq <- function(model) {
# Înlocuiește cu funcția corectă sau folosește o aproximare
AIC(model, k = log(length(model$residuals)))
}
hq_small <- calc_hq(model_small)
hq_medium <- calc_hq(model_medium)
hq_large <- calc_hq(model_large)
cat("\nCriteriul Hannan-Quinn pentru ferme mici:", hq_small, "\n")
cat("Criteriul Hannan-Quinn pentru ferme medii:", hq_medium, "\n")
cat("Criteriul Hannan-Quinn pentru ferme mari:", hq_large, "\n")
# Alegerea modelului cu cel mai mare R^2 ajustat
best_model <- model_small
best_model_label <- "fermele mici"
best_r_squared <- adjusted_r_squared_small
if (adjusted_r_squared_medium > best_r_squared) {
best_model <- model_medium
best_model_label <- "fermele medii"
best_r_squared <- adjusted_r_squared_medium
}
if (adjusted_r_squared_large > best_r_squared) {
best_model <- model_large
best_model_label <- "fermele mari"
best_r_squared <- adjusted_r_squared_large
}
cat("\nModelul optim este pentru", best_model_label, "cu R^2 ajustat:", best_r_squared, "\n")
return(best_model)
}
best_model <- choose_best_model(model_small, model_medium, model_large)
enchance_multiple_linear_model(best_model)
library(AICcmodavg)
library(lmtest)
library(glmnet)
library(caret)
library(stats)
library(MASS)
library(sandwich)
library(tseries)
library(car)
library(olsrr)
# Incarcarea datelor
dataset <- read.csv("Cleaned_Dairy_Dataset.csv", header = TRUE, sep = ",")
str(dataset)
dataset$Date <- as.Date(dataset$Date, format = "%Y-%m-%d")
result_medium <- process_farm_data(medium_farms, "Medium")
result_large <- process_farm_data(large_farms, "Large")
model_small <- result_small$model
data_small <- result_small$data
residuals_small <- result_small$residuals
model_medium <- result_medium$model
data_medium <- result_medium$data
residuals_medium <- result_medium$residuals
model_large <- result_large$model
data_large <- result_large$data
residuals_large <- result_large$residuals
enchance_multiple_linear_model <- function(model)
{
summary_model <- summary(model)
cat("\nRezumatul modelului de regresie multipla:\n")
print(summary_model)
}
enchance_multiple_linear_model(model_small)
enchance_multiple_linear_model(model_medium)
enchance_multiple_linear_model(model_large)
compare_farms_models <- function(model_small, model_medium, model_large, data_small, data_medium, data_large) {
cat("================================= ANALIZA COMPARATIVĂ =================================\n")
# 1. Performanța modelelor
cat("\n1. Compararea performanței modelelor (RMSE):\n")
# Calcularea RMSE pentru fiecare model
calc_rmse <- function(model, data) {
pred <- predict(model, data)
actual <- data$Revenue
sqrt(mean((pred - actual)^2))
}
rmse_small <- calc_rmse(model_small, data_small)
rmse_medium <- calc_rmse(model_medium, data_medium)
rmse_large <- calc_rmse(model_large, data_large)
cat("RMSE pentru ferme mici:", rmse_small, "\n")
cat("RMSE pentru ferme medii:", rmse_medium, "\n")
cat("RMSE pentru ferme mari:", rmse_large, "\n")
# 2. Compararea coeficienților semnificativi
cat("\n2. Compararea coeficienților semnificativi din modele:\n")
print("Ferme mici:")
print(summary(model_small)$coefficients)
print("Ferme medii:")
print(summary(model_medium)$coefficients)
print("Ferme mari:")
print(summary(model_large)$coefficients)
# 3. Testarea diferențelor între modelele reziduurilor folosind ANOVA
cat("\n3. Testarea diferențelor între modele folosind ANOVA:\n")
# Combinația datelor și reziduurilor pentru ANOVA
data_small$residuals <- residuals(model_small)
data_medium$residuals <- residuals(model_medium)
data_large$residuals <- residuals(model_large)
combined_data <- data.frame(
Residuals = c(data_small$residuals, data_medium$residuals, data_large$residuals),
Farm_Type = rep(c("Small", "Medium", "Large"),
times = c(nrow(data_small), nrow(data_medium), nrow(data_large)))
)
anova_test <- aov(Residuals ~ Farm_Type, data = combined_data)
print(summary(anova_test))
# 4. Testarea diferențelor dintre medii folosind t-test pentru perechi
cat("\n4. Testarea diferențelor dintre medii (t-test perechi):\n")
t_test_small_medium <- t.test(data_small$residuals, data_medium$residuals)
t_test_medium_large <- t.test(data_medium$residuals, data_large$residuals)
t_test_small_large <- t.test(data_small$residuals, data_large$residuals)
cat("T-test între ferme mici și medii:\n")
print(t_test_small_medium)
cat("T-test între ferme medii și mari:\n")
print(t_test_medium_large)
cat("T-test între ferme mici și mari:\n")
print(t_test_small_large)
# 5. Vizualizări grafice
cat("\n5. Vizualizări grafice pentru reziduuri:\n")
par(mfrow = c(1, 3)) # Setăm layout pentru 3 grafice
hist(data_small$residuals, main = "Ferme Mici", xlab = "Reziduuri", col = "lightblue", border = "black")
hist(data_medium$residuals, main = "Ferme Medii", xlab = "Reziduuri", col = "lightgreen", border = "black")
hist(data_large$residuals, main = "Ferme Mari", xlab = "Reziduuri", col = "lightcoral", border = "black")
par(mfrow = c(1, 1)) # Resetăm layout
cat("\n================================= SFÂRȘIT ANALIZĂ =================================\n")
}
compare_farms_models(model_small, model_medium, model_large, data_small, data_medium, data_large)
choose_best_model <- function(model_small, model_medium, model_large) {
cat("================================= ALEGEM CEL MAI BUN MODEL =================================\n")
# Calcularea R^2 și R^2 ajustat pentru fiecare model
calc_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$r.squared
}
r_squared_small <- calc_r_squared(model_small)
r_squared_medium <- calc_r_squared(model_medium)
r_squared_large <- calc_r_squared(model_large)
cat("\nR^2 pentru ferme mici:", r_squared_small, "\n")
cat("R^2 pentru ferme medii:", r_squared_medium, "\n")
cat("R^2 pentru ferme mari:", r_squared_large, "\n")
# Calcularea R^2 ajustat pentru fiecare model
calc_adjusted_r_squared <- function(model) {
summary_model <- summary(model)
summary_model$adj.r.squared
}
adjusted_r_squared_small <- calc_adjusted_r_squared(model_small)
adjusted_r_squared_medium <- calc_adjusted_r_squared(model_medium)
adjusted_r_squared_large <- calc_adjusted_r_squared(model_large)
cat("\nR^2 ajustat pentru ferme mici:", adjusted_r_squared_small, "\n")
cat("R^2 ajustat pentru ferme medii:", adjusted_r_squared_medium, "\n")
cat("R^2 ajustat pentru ferme mari:", adjusted_r_squared_large, "\n")
# Calcularea criteriilor informationale Akaike, Schwarz și Hannan-Quinn
calc_aic <- function(model) {
AIC(model)
}
aic_small <- calc_aic(model_small)
aic_medium <- calc_aic(model_medium)
aic_large <- calc_aic(model_large)
cat("\nCriteriul Akaike pentru ferme mici:", aic_small, "\n")
cat("Criteriul Akaike pentru ferme medii:", aic_medium, "\n")
cat("Criteriul Akaike pentru ferme mari:", aic_large, "\n")
calc_bic <- function(model) {
BIC(model)
}
bic_small <- calc_bic(model_small)
bic_medium <- calc_bic(model_medium)
bic_large <- calc_bic(model_large)
cat("\nCriteriul Schwarz pentru ferme mici:", bic_small, "\n")
cat("Criteriul Schwarz pentru ferme medii:", bic_medium, "\n")
cat("Criteriul Schwarz pentru ferme mari:", bic_large, "\n")
# Notă: HQIC nu este o funcție standard în R, așa că este necesar să o implementezi sau să verifici dacă pachetul folosit suportă HQIC.
calc_hq <- function(model) {
# Înlocuiește cu funcția corectă sau folosește o aproximare
AIC(model, k = log(length(model$residuals)))
}
hq_small <- calc_hq(model_small)
hq_medium <- calc_hq(model_medium)
hq_large <- calc_hq(model_large)
cat("\nCriteriul Hannan-Quinn pentru ferme mici:", hq_small, "\n")
cat("Criteriul Hannan-Quinn pentru ferme medii:", hq_medium, "\n")
cat("Criteriul Hannan-Quinn pentru ferme mari:", hq_large, "\n")
# Alegerea modelului cu cel mai mare R^2 ajustat
best_model <- model_small
best_model_label <- "fermele mici"
best_r_squared <- adjusted_r_squared_small
if (adjusted_r_squared_medium > best_r_squared) {
best_model <- model_medium
best_model_label <- "fermele medii"
best_r_squared <- adjusted_r_squared_medium
}
if (adjusted_r_squared_large > best_r_squared) {
best_model <- model_large
best_model_label <- "fermele mari"
best_r_squared <- adjusted_r_squared_large
}
cat("\nModelul optim este pentru", best_model_label, "cu R^2 ajustat:", best_r_squared, "\n")
return(best_model)
}
best_model <- choose_best_model(model_small, model_medium, model_large)
enchance_multiple_linear_model(best_model)
str(dataset)
#La modelul optim adaugam variabile dummy si termeni de interactiune pentru a analiza comportamentul modelului
#Adaugam variabile dummy pentru Location si Sales Channel
data <- dataset
data$Location <- as.factor(data$Location)
data$Sales.Channel <- as.factor(data$Sales.Channel)
data <- model.matrix(~ . - 1, data = data)
# Adaugam termeni de interactiune pentru variabilele Quantity..liters.kg. si Price.per.Unit
data$Quantity.Price.Interaction <- data$Quantity..liters.kg. * data$Price.per.Unit
data$Quantity.Price.Interaction.Sold <- data$Quantity.Sold..liters.kg. * data$Price.per.Unit..sold.
# Modelul optim cu variabilele adaugate
model_optim_enhanced <- lm(Approx..Total.Revenue.INR. ~ ., data = data)
enchance_multiple_linear_model(model_optim_enhanced)
source("~/Econometrie/main2.R")
install.packages("AICcmodavg")
install.packages("tseries")
install.packages("MASS")
install.packages("car")
install.packages("olsrr")
install.packages("lmtest")
install.packages("sandwich")
install.packages("glmnet")
install.packages("caret", type = "binary")
install.packages("caret", type = "binary")
